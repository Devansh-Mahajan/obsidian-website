---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { getCollection } from 'astro:content';
import { getUrl } from '../utils/url';

interface Props {
    title?: string;
    description?: string;
    currentPath?: string; // notes relative path without extension
}

const { title = 'Study Notes', description = 'Notes from my Obsidian vault.', currentPath } = Astro.props as Props;

const notes = await getCollection('notes');

function toPathWithoutExt(id: string) {
    return id.replace(/\.[^/.]+$/, '');
}

// Build a tree from note ids
type TreeNode = { name: string; path?: string; children?: Record<string, TreeNode> };
const root: Record<string, TreeNode> = {};
for (const note of notes) {
    const rel = toPathWithoutExt(note.id);
    const parts = rel.split('/');
    let cursor = root;
    for (let i = 0; i < parts.length; i++) {
        const part = parts[i];
        cursor[part] = cursor[part] || { name: part };
        if (i === parts.length - 1) {
            cursor[part].path = rel;
        } else {
            cursor[part].children = cursor[part].children || {};
            cursor = cursor[part].children!;
        }
    }
}

function sortKeys(obj: Record<string, TreeNode>) {
    return Object.keys(obj).sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base' }));
}

function breadcrumbFrom(path?: string) {
    if (!path) return [] as string[];
    return path.split('/');
}

const breadcrumbs = breadcrumbFrom(currentPath);
---

<!doctype html>
<html lang="en">
    <head>
        <BaseHead title={title} description={description} />
        <style>
            /* Dark theme for Study Notes - Obsidian Publish style */
            :root {
                --obsidian-bg: #1e1e1e;
                --obsidian-bg-secondary: #2d2d2d;
                --obsidian-bg-tertiary: #3a3a3a;
                --obsidian-text: #dcddde;
                --obsidian-text-secondary: #a0a0a0;
                --obsidian-text-muted: #7a7a7a;
                --obsidian-accent: #7c3aed;
                --obsidian-accent-hover: #8b5cf6;
                --obsidian-border: #404040;
                --obsidian-border-light: #2a2a2a;
                --obsidian-hover: #3a3a3a;
                --obsidian-active: #4a4a4a;
            }

            body { 
                min-height: 100vh; 
                display: flex; 
                flex-direction: column; 
                margin: 0; 
                background: var(--obsidian-bg);
                color: var(--obsidian-text);
            }
            
            main { 
                flex: 1; 
                width: 100%; 
                max-width: 1400px; 
                margin: 0 auto; 
                padding: 1.5rem; 
                display: grid; 
                grid-template-columns: 320px 1fr; 
                gap: 1.5rem; 
            }
            
            .sidebar { 
                position: sticky; 
                top: 4.5rem; 
                height: calc(100vh - 5rem); 
                overflow: auto; 
                padding: 1rem; 
                border-radius: 0.75rem; 
                background: var(--obsidian-bg-secondary);
                border: 1px solid var(--obsidian-border);
            }
            
            .search { 
                width: 100%; 
                padding: 0.6rem 0.8rem; 
                border-radius: 0.5rem; 
                border: 1px solid var(--obsidian-border); 
                background: var(--obsidian-bg-tertiary); 
                color: var(--obsidian-text);
                margin-bottom: 0.75rem; 
            }
            
            .search::placeholder {
                color: var(--obsidian-text-muted);
            }
            
            .search:focus {
                outline: none;
                border-color: var(--obsidian-accent);
                box-shadow: 0 0 0 2px rgba(124, 58, 237, 0.2);
            }
            
            .tree { 
                list-style: none; 
                margin: 0; 
                padding: 0; 
            }
            
            .tree-item { 
                margin: 0.15rem 0; 
            }
            
            .folder, .note { 
                display: flex; 
                align-items: center; 
                gap: 0.4rem; 
            }
            
            .folder-arrow {
                color: var(--obsidian-text-secondary);
                font-size: 0.8rem;
                transition: transform 0.2s ease;
                cursor: pointer;
                user-select: none;
            }
            
            details[open] .folder-arrow {
                transform: rotate(90deg);
            }
            
            .folder-name {
                color: var(--obsidian-text-secondary);
                cursor: pointer;
            }
            
            summary {
                cursor: pointer;
                list-style: none;
                display: flex;
                align-items: center;
                gap: 0.4rem;
                padding: 0.25rem 0.35rem;
                border-radius: 0.4rem;
                transition: all 0.2s ease;
            }
            
            summary:hover {
                background: var(--obsidian-hover);
            }
            
            summary::-webkit-details-marker {
                display: none;
            }
            
            .link { 
                text-decoration: none; 
                color: var(--obsidian-text-secondary); 
                padding: 0.25rem 0.35rem; 
                border-radius: 0.4rem; 
                display: inline-block; 
                transition: all 0.2s ease;
            }
            
            .link:hover { 
                background: var(--obsidian-hover); 
                color: var(--obsidian-text); 
            }
            
            .active { 
                color: var(--obsidian-accent); 
                font-weight: 600; 
                background: var(--obsidian-active);
            }
            
            .breadcrumbs { 
                font-size: 0.9rem; 
                color: var(--obsidian-text-muted); 
                margin-bottom: 0.5rem; 
            }
            
            .breadcrumbs .link {
                color: var(--obsidian-text-secondary);
            }
            
            .breadcrumbs .link:hover {
                color: var(--obsidian-accent);
            }
            
            .breadcrumb-part {
                color: var(--obsidian-text-secondary);
            }
            
            .content { 
                padding: 2rem; 
                border-radius: 0.75rem; 
                background: var(--obsidian-bg-secondary); 
                border: 1px solid var(--obsidian-border);
                box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            }
            
            .content h1, .content h2, .content h3, .content h4, .content h5, .content h6 {
                color: var(--obsidian-text);
                margin-top: 1.5rem;
                margin-bottom: 0.75rem;
            }
            
            .content h1 {
                font-size: 2rem;
                border-bottom: 2px solid var(--obsidian-border);
                padding-bottom: 0.5rem;
            }
            
            .content p {
                line-height: 1.6;
                margin-bottom: 1rem;
                color: var(--obsidian-text);
            }
            
            .content a {
                color: var(--obsidian-accent);
                text-decoration: none;
            }
            
            .content a:hover {
                color: var(--obsidian-accent-hover);
                text-decoration: underline;
            }
            
            .content code {
                background: var(--obsidian-bg-tertiary);
                color: var(--obsidian-accent);
                padding: 0.2rem 0.4rem;
                border-radius: 0.3rem;
                font-size: 0.9em;
            }
            
            .content pre {
                background: var(--obsidian-bg-tertiary);
                border: 1px solid var(--obsidian-border);
                border-radius: 0.5rem;
                padding: 1rem;
                overflow-x: auto;
                margin: 1rem 0;
            }
            
            .content pre code {
                background: none;
                padding: 0;
                color: var(--obsidian-text);
            }
            
            .content blockquote {
                border-left: 4px solid var(--obsidian-accent);
                background: var(--obsidian-bg-tertiary);
                margin: 1rem 0;
                padding: 1rem;
                border-radius: 0 0.5rem 0.5rem 0;
            }
            
            .content ul, .content ol {
                margin: 1rem 0;
                padding-left: 1.5rem;
            }
            
            .content li {
                margin: 0.25rem 0;
                color: var(--obsidian-text);
            }
            
            .content table {
                width: 100%;
                border-collapse: collapse;
                margin: 1rem 0;
                background: var(--obsidian-bg-tertiary);
                border-radius: 0.5rem;
                overflow: hidden;
            }
            
            .content th, .content td {
                padding: 0.75rem;
                text-align: left;
                border-bottom: 1px solid var(--obsidian-border);
            }
            
            .content th {
                background: var(--obsidian-bg);
                color: var(--obsidian-text);
                font-weight: 600;
            }
            
            .attachments { 
                margin-top: 2rem; 
                padding-top: 1.5rem; 
                border-top: 1px solid var(--obsidian-border); 
            }
            
            .attachments h3 { 
                margin-bottom: 1rem; 
                color: var(--obsidian-text); 
                font-size: 1.1rem; 
            }
            
            .attachment-list { 
                display: grid; 
                grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); 
                gap: 0.75rem; 
            }
            
            .attachment-item { 
                display: flex; 
                align-items: center; 
                gap: 0.5rem; 
                padding: 0.75rem; 
                border-radius: 0.5rem; 
                background: var(--obsidian-bg-tertiary); 
                border: 1px solid var(--obsidian-border);
                text-decoration: none; 
                color: var(--obsidian-text); 
                transition: all 0.2s ease; 
            }
            
            .attachment-item:hover { 
                background: var(--obsidian-hover); 
                border-color: var(--obsidian-accent);
                transform: translateY(-1px); 
            }
            
            .attachment-icon { 
                width: 1.25rem; 
                height: 1.25rem; 
                flex-shrink: 0; 
            }
            
            .attachment-name { 
                font-size: 0.9rem; 
                font-weight: 500; 
            }
            
            /* Mermaid diagrams dark theme */
            .content :global(.mermaid) {
                background: var(--obsidian-bg-tertiary) !important;
                border: 1px solid var(--obsidian-border);
                border-radius: 0.5rem;
                padding: 1rem;
                margin: 1rem 0;
            }
            
            .content :global(.mermaid svg) {
                background: transparent !important;
            }
            
            /* Math equations */
            .content :global(.katex) {
                color: var(--obsidian-text);
            }
            
            /* Image styling */
            .content img {
                border-radius: 0.5rem;
                border: 1px solid var(--obsidian-border);
                max-width: 100%;
                height: auto;
            }
            
            @media (max-width: 980px) { 
                main { 
                    grid-template-columns: 1fr; 
                } 
                .sidebar { 
                    position: static; 
                    height: auto; 
                } 
            }
        </style>
    </head>
    <body>
        <Header />
        <main>
            <aside class="sidebar">
                <input class="search" type="search" placeholder="Search notes..." aria-label="Search notes" />
                <ul class="tree" id="notes-tree">
                    {sortKeys(root).map((key) => {
                        const node = root[key];
                        const hasChildren = !!node.children && Object.keys(node.children).length > 0;
                        const label = node.name;
                        const path = node.path ? `/notes/${node.path}` : undefined;
                        const isActive = path && currentPath && (path === `/notes/${currentPath}`);
                        return (
                            <li class="tree-item">
                                {hasChildren ? (
                                    <details open>
                                        <summary class="folder">
                                            <span class="folder-arrow">▸</span>
                                            <span class="folder-name">{label}</span>
                                        </summary>
                                        <ul class="tree">
                                            {sortKeys(node.children!).map((k) => {
                                                const childNode = node.children![k];
                                                const childPath = childNode.path ? `/notes/${childNode.path}` : undefined;
                                                const childActive = childPath && currentPath && (childPath === `/notes/${currentPath}`);
                                                return (
                                                    <li class="tree-item">
                                                        <div class="note">
                                                            {childPath ? (
                                                                <a class={`link ${childActive ? 'active' : ''}`} href={getUrl(childPath)}>
                                                                    {childNode.name}
                                                                </a>
                                                            ) : (
                                                                <span>{childNode.name}</span>
                                                            )}
                                                        </div>
                                                    </li>
                                                );
                                            })}
                                        </ul>
                                    </details>
                                ) : (
                                    <div class="note">
                                        {path ? (
                                            <a class={`link ${isActive ? 'active' : ''}`} href={getUrl(path)}>
                                                {label}
                                            </a>
                                        ) : (
                                            <span>{label}</span>
                                        )}
                                    </div>
                                )}
                            </li>
                        );
                    })}
                </ul>
            </aside>
            <section class="content">
                {breadcrumbs.length > 0 && (
                    <div class="breadcrumbs">
                        <a class="link" href={getUrl('/notes')}>Study Notes</a>
                        {breadcrumbs.map((part, i) => (
                            <>
                                {' / '}<span class="breadcrumb-part">{part}</span>
                            </>
                        ))}
                    </div>
                )}
                <slot />
                <div class="attachments" id="attachments-section" style="display: none;">
                    <h3>Attachments</h3>
                    <div class="attachment-list" id="attachment-list"></div>
                </div>
            </section>
        </main>
        <Footer />
        <script>
            const search = document.querySelector('.search');
            const tree = document.getElementById('notes-tree');
            const results = document.createElement('div');
            results.style.marginTop = '0.5rem';
            tree.parentElement.insertBefore(results, tree.nextSibling);
            let index = [];
            fetch('/notes-index.json').then(r => r.ok ? r.json() : []).then(data => { index = data || []; }).catch(() => {});
            function matches(text, q){ return text.toLowerCase().includes(q.toLowerCase()); }
            function renderResults(q){
                if (!q) { results.innerHTML = ''; return; }
                const qs = q.trim().toLowerCase();
                const items = index
                  .map(r => {
                    const ti = r.title.toLowerCase().indexOf(qs);
                    const ci = r.content.toLowerCase().indexOf(qs);
                    let score = 0;
                    if (ti >= 0) score += 5;
                    if (ci >= 0) score += 1;
                    return { r, score, ti, ci };
                  })
                  .filter(x => x.score > 0)
                  .sort((a,b) => b.score - a.score)
                  .slice(0, 20);
                results.innerHTML = items.map(({r, ti, ci}) => {
                    const url = `/notes/${r.path}`;
                    return `<div style="padding: .35rem 0"><a class="link" href="${url}">${r.title}</a></div>`;
                }).join('');
            }
            search?.addEventListener('input', () => {
                const q = search.value.trim();
                if (!q) {
                    Array.from(tree.querySelectorAll('li')).forEach(li => li.style.display = '');
                    results.innerHTML = '';
                    return;
                }
                Array.from(tree.querySelectorAll('li')).forEach(li => {
                    const txt = li.textContent || '';
                    li.style.display = matches(txt, q) ? '' : 'none';
                });
                renderResults(q);
            });

            // Load and display attachments for current note
            const attachmentsSection = document.getElementById('attachments-section');
            const attachmentList = document.getElementById('attachment-list');
            
            function getFileIcon(filename) {
                const ext = filename.split('.').pop()?.toLowerCase();
                const icons = {
                    pdf: '📄', doc: '📝', docx: '📝', xls: '📊', xlsx: '📊', ppt: '📽️', pptx: '📽️',
                    png: '🖼️', jpg: '🖼️', jpeg: '🖼️', gif: '🖼️', svg: '🖼️', webp: '🖼️',
                    mp4: '🎥', webm: '🎥', mp3: '🎵', wav: '🎵', zip: '📦'
                };
                return icons[ext] || '📎';
            }

            function loadAttachments() {
                const currentPath = window.location.pathname.replace('/notes/', '').replace(/\/$/, '');
                if (!currentPath) return;
                
                // Find attachments in the same folder as the current note
                fetch('/notes-index.json')
                    .then(r => r.ok ? r.json() : [])
                    .then(index => {
                        const note = index.find(n => n.path === currentPath);
                        if (!note) return;
                        
                        // Extract attachment references from note content
                        const attachmentRefs = new Set();
                        const content = note.content || '';
                        const matches = content.match(/\/attachments\/[^\s\)]+/g) || [];
                        matches.forEach(match => {
                            const filename = match.split('/').pop();
                            if (filename) attachmentRefs.add(filename);
                        });
                        
                        if (attachmentRefs.size > 0) {
                            attachmentList.innerHTML = Array.from(attachmentRefs).map(filename => {
                                const icon = getFileIcon(filename);
                                const url = `/attachments/${currentPath.split('/').slice(0, -1).join('/')}/${filename}`;
                                return `
                                    <a href="${url}" class="attachment-item" target="_blank">
                                        <span class="attachment-icon">${icon}</span>
                                        <span class="attachment-name">${filename}</span>
                                    </a>
                                `;
                            }).join('');
                            attachmentsSection.style.display = 'block';
                        }
                    })
                    .catch(() => {});
            }

            // Load attachments when page loads
            loadAttachments();
        </script>
    </body>

</html>

